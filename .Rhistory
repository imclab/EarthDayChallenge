install.packages("shiny")
library(shiny)
shiny::run app
shiny:: Run App
shiny::runApp
shiny::runApp("app")
plot(1:10)
library(sp)
library(maptools)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
names(nc)
# create two dummy factor variables, with equal labels:
set.seed(31)
nc$f = factor(sample(1:5,100,replace=T),labels=letters[1:5])
nc$g = factor(sample(1:5,100,replace=T),labels=letters[1:5])
library(RColorBrewer)
## Two (dummy) factor variables shown with qualitative colour ramp; degrees in axes
spplot(nc, c("f","g"), col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
install.packages(c("sp", "maptools"))
library(sp)
library(maptools)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
names(nc)
# create two dummy factor variables, with equal labels:
set.seed(31)
nc$f = factor(sample(1:5,100,replace=T),labels=letters[1:5])
nc$g = factor(sample(1:5,100,replace=T),labels=letters[1:5])
library(RColorBrewer)
## Two (dummy) factor variables shown with qualitative colour ramp; degrees in axes
spplot(nc, c("f","g"), col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
install.packages("RColorBrewer")
library(sp)
library(maptools)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
names(nc)
# create two dummy factor variables, with equal labels:
set.seed(31)
nc$f = factor(sample(1:5,100,replace=T),labels=letters[1:5])
nc$g = factor(sample(1:5,100,replace=T),labels=letters[1:5])
library(RColorBrewer)
## Two (dummy) factor variables shown with qualitative colour ramp; degrees in axes
spplot(nc, c("f","g"), col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
library(RColorBrewer)
library(sp)
library(maptools)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
names(nc)
# create two dummy factor variables, with equal labels:
set.seed(31)
nc$f = factor(sample(1:5,100,replace=T),labels=letters[1:5])
nc$g = factor(sample(1:5,100,replace=T),labels=letters[1:5])
library(RColorBrewer)
## Two (dummy) factor variables shown with qualitative colour ramp; degrees in axes
spplot(nc, c("f","g"), col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
library(sp)
library(maptools)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
names(nc)
# create two dummy factor variables, with equal labels:
set.seed(31)
nc$f = factor(sample(1:5,100,replace=T),labels=letters[1:5])
nc$g = factor(sample(1:5,100,replace=T),labels=letters[1:5])
library(RColorBrewer)
## Two (dummy) factor variables shown with qualitative colour ramp; degrees in axes
spplot(nc, c("f","g"), col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
library(shiny)
shiny::runApp("app")
install.packages('ggplot2)
l
;
\
sad
fsfkljasdfj
dsafs0''
""''
install.packages('ggplot2')
shiny::runApp("app")
install.packages('maps')
shiny::runApp("app")
library(ggplot2) # Fancy Plots
library(maps) # Map Data
poly.county <- map_data("county")
air.quality <- read.csv("data/air-quality-2010.csv")
air.quality$subregion <- gsub("\\.", "", air.quality$subregion)
joined <- merge(poly.county, air.quality, by = c("region", "subregion"), all.x = TRUE)
joined <- joined[order(joined$order), ] # Fix merge dicking around with ordering
library(shiny) # Load shiny
library(ggplot2) # Fancy Plots
library(maps) # Map Data
poly.county <- map_data("county")
air.quality <- read.csv("data/air-quality-2010.csv")
air.quality$subregion <- gsub("\\.", "", air.quality$subregion)
joined <- merge(poly.county, air.quality, by = c("region", "subregion"), all.x = TRUE)
joined <- joined[order(joined$order), ] # Fix merge dicking around with ordering
